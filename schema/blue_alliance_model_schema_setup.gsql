# Blue Alliance Model

// clear the current catalog. 
// It may take a while since it restarts the subsystem services. 
DROP ALL

// create vertex types
# Event Teams
CREATE VERTEX EventTeams (PRIMARY_ID team STRING) WITH primary_id_as_attribute="TRUE"

# Event Matches
CREATE VERTEX EventMatches (
    PRIMARY_ID eventMatchKey STRING, 
    red1 STRING, 
    red2 STRING, 
    red3 STRING, 
    blue1 STRING, 
    blue2 STRING, 
    blue3 STRING, 
    redScore INT, 
    blueScore INT) 
    WITH primary_id_as_attribute="TRUE"

# Event Alliances
CREATE VERTEX EventAlliances (
    PRIMARY_ID allianceId UINT, 
    captain STRING, 
    pick1 STRING, 
    pick2 STRING) 
    WITH primary_id_as_attribute="TRUE"

# Event Rankings
CREATE VERTEX EventRankings (
    PRIMARY_ID rankingId UINT, 
    rank INT, 
    team INT, 
    qs DOUBLE, 
    assist DOUBLE, 
    autoStat DOUBLE, 
    tc DOUBLE, 
    teleop DOUBLE, 
    record STRING, 
    dq INT, 
    played INT) 
    WITH primary_id_as_attribute="TRUE"

# Event Awards 
// awardType - enum
// team - can be null
// awardee - can be null
CREATE VERTEX EventAwards (
    PRIMARY_ID eventKey STRING, 
    awardType STRING,
    awardName STRING, 
    team STRING, 
    awardee STRING) WITH primary_id_as_attribute="TRUE"

// create edge types
CREATE DIRECTED EDGE PARTICIPATES_IN (FROM EventTeams, TO EventMatches) WITH REVERSE_EDGE="PARTICIPATES_IN_REVERSE"
CREATE DIRECTED EDGE HAS_ALLIANCE (FROM EventTeams, TO EventAlliances) WITH REVERSE_EDGE="HAS_ALLIANCE_REVERSE"
CREATE DIRECTED EDGE HAS_RANK (FROM EventTeams, TO EventRankings) WITH REVERSE_EDGE="HAS_RANK_REVERSE"
CREATE DIRECTED EDGE RECIPIENT_OF (FROM EventTeams, TO EventAwards) WITH REVERSE_EDGE="RECIPIENT_OF_REVERSE"

// create graph type
CREATE GRAPH blue_alliance_model (*)

# GSQL script for loading Blue Alliance Model data

USE GRAPH blue_alliance_model

CREATE LOADING JOB load_blue_alliance_model FOR GRAPH blue_alliance_model {
// define vertex
   DEFINE FILENAME v_eventTeam_file;
   DEFINE FILENAME v_eventMatch_file;
   DEFINE FILENAME v_eventAlliance_file;
   DEFINE FILENAME v_eventRanking_file;
   DEFINE FILENAME v_eventAward_file;

// define edge
    DEFINE FILENAME eventTeam_participatesIn_eventMatch_file;
    DEFINE FILENAME eventTeam_hasAlliance_eventTeam_file;
    DEFINE FILENAME eventTeam_hasRank_eventRanking_file;
    DEFINE FILENAME eventTeam_recipientOf_eventAward_file;


// load vertex
    LOAD v_eventTeam_file
        TO VERTEX EventTeams VALUES ($0) USING header="true", separator="|";
    
    LOAD v_eventMatch_file 
        TO VERTEX EventMatches VALUES ($0, $1, $2, $3, $4, $5, $6, $7, $8) USING header="true", separator="|";

    LOAD v_eventAlliance_file
        TO VERTEX EventAlliances VALUES ($0, $1, $2, $3) USING header="true", separator="|";

    LOAD v_eventRanking_file
        TO VERTEX EventRankings VALUES ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) USING header="true", separator="|";
  
   LOAD v_eventAward_file
        TO VERTEX EventAwards VALUES ($0, $1, $2, $3, $4) USING header="true", separator="|";

// load edge
    LOAD eventTeam_participatesIn_eventMatch_file
       TO EDGE PARTICIPATES_IN VALUES ($0, $1) USING header="true", separator="|";

    LOAD eventTeam_hasAlliance_eventTeam_file
        TO EDGE HAS_ALLIANCE VALUES ($0, $1) USING header="true", separator="|";

    LOAD eventTeam_hasRank_eventRanking_file
        TO EDGE HAS_RANK VALUES ($0, $1) USING header="true", separator="|";

    LOAD eventTeam_recipientOf_eventAward_file
        TO EDGE RECIPIENT_OF VALUES ($0, $1) USING header="true", separator="|";
}